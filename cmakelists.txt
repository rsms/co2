cmake_minimum_required(VERSION 3.12)
set(LLVM_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/deps/llvm)
set(CMAKE_C_COMPILER   ${LLVM_PREFIX}/bin/clang)
set(CMAKE_CPP_COMPILER ${LLVM_PREFIX}/bin/clang++)
set(ENV{PATH} "${LLVM_PREFIX}/bin:$ENV{PATH}")

# CO_WITH_LLVM -- enable LLVM component of co (src/co/llvm + llvm libs)
set(CO_ENABLE_RT yes)
set(CO_WITH_LLVM no)
set(CO_WITH_BINARYEN yes) # incompatible with CO_WITH_LLVM due to symbol clash

# CO_LLVM_LINK_TYPE = SHARED | STATIC
#   llvm libraries can either be statically linked into the co executable
#   which produces a compact portable binary but takes a long time to link,
#   or it can be built as a shared dynamic library that is lodaded by co at
#   runtime. The SHARED type gives much faster compile turn-around times at
#   the expese of less portable and larger code.
if (NOT CO_LLVM_LINK_TYPE)
  set(CO_LLVM_LINK_TYPE STATIC)
  if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
    set(CO_LLVM_LINK_TYPE SHARED)
  endif()
endif()

if (NOT CO_BN_LINK_TYPE)
  set(CO_BN_LINK_TYPE STATIC)
  if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
    set(CO_BN_LINK_TYPE SHARED)
  endif()
endif()


set(PROJECT_LANGUAGES C)
if ((CO_WITH_LLVM OR CO_WITH_BINARYEN) AND CO_ENABLE_RT)
  set(PROJECT_LANGUAGES C CXX ASM)
elseif(CO_WITH_LLVM OR CO_WITH_BINARYEN)
  set(PROJECT_LANGUAGES C CXX)
elseif (CO_ENABLE_RT)
  set(PROJECT_LANGUAGES C ASM)
endif()


if (CO_WITH_BINARYEN)
  set(BUILD_STATIC_LIB ON) # for binaryen
  include_directories(
    $<$<COMPILE_LANGUAGE:CXX>:${CMAKE_CURRENT_SOURCE_DIR}/deps/libcxx/include>
  )
  #link_directories(${CMAKE_CURRENT_SOURCE_DIR}/deps/libcxx/lib)
  add_subdirectory("deps/binaryen" EXCLUDE_FROM_ALL)
  unset(BUILD_STATIC_LIB)
endif()


project(co
  LANGUAGES ${PROJECT_LANGUAGES})

include($ENV{CKIT_DIR}/ckit.cmake)
ckit_configure_project(C)

# include debug symbols in all builds
add_compile_options(-g)

if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
  # enable tests in the regular executable for debug builds
  add_definitions(-DR_TESTING_ENABLED=1)

  # enable address and undefined-behavior sanitizer
  # https://clang.llvm.org/docs/AddressSanitizer.html
  # https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
  add_compile_options(
    -fsanitize=address,undefined
    -fsanitize-address-use-after-scope
    -fno-omit-frame-pointer
    -fno-optimize-sibling-calls
  )
  add_link_options(-fsanitize=address,undefined)
else()
  # optimize for native/host arch
  add_compile_options(-march=native)
endif()

ckit_require_package(rbase)

add_subdirectory(src/xxhash EXCLUDE_FROM_ALL)
add_subdirectory(deps/jemalloc EXCLUDE_FROM_ALL)


#————————————————————————————————————————————————————————————————————————————————————————————————
# llvm
if (CO_WITH_LLVM)

set(CO_LLVM_COMPONENTS
  # LLVM components (libraries) to include. See deps/llvm/bin/llvm-config --components
  # windowsmanifest: needed for lld COFF
  engine
  option
  passes
  all-targets
  libdriver
  lto
  linker
  debuginfopdb
  debuginfodwarf
  windowsmanifest
)

execute_process(
  COMMAND ${LLVM_PREFIX}/bin/llvm-config --cflags
  OUTPUT_VARIABLE LLVM_C_FLAGS
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND ${LLVM_PREFIX}/bin/llvm-config --cxxflags
  OUTPUT_VARIABLE LLVM_CXX_FLAGS
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND ${LLVM_PREFIX}/bin/llvm-config --ldflags
  OUTPUT_VARIABLE LLVM_LD_FLAGS
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND ${LLVM_PREFIX}/bin/llvm-config --system-libs
  OUTPUT_VARIABLE LLVM_SYSTEM_LIBS
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
  COMMAND ${LLVM_PREFIX}/bin/llvm-config --link-static --libs ${CO_LLVM_COMPONENTS}
  OUTPUT_VARIABLE LLVM_LLVM_LIBS
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

separate_arguments(LLVM_C_FLAGS UNIX_COMMAND ${LLVM_C_FLAGS})
separate_arguments(LLVM_CXX_FLAGS UNIX_COMMAND ${LLVM_CXX_FLAGS})
separate_arguments(LLVM_LD_FLAGS UNIX_COMMAND ${LLVM_LD_FLAGS})

message(VERBOSE "LLVM_C_FLAGS     '${LLVM_C_FLAGS}'")
message(VERBOSE "LLVM_CXX_FLAGS   '${LLVM_CXX_FLAGS}'")
message(VERBOSE "LLVM_LD_FLAGS    '${LLVM_LD_FLAGS}'")
message(VERBOSE "LLVM_SYSTEM_LIBS '${LLVM_SYSTEM_LIBS}'")
message(VERBOSE "LLVM_LLVM_LIBS   '${LLVM_LLVM_LIBS}'")

endif()
#————————————————————————————————————————————————————————————————————————————————————————————————
# libcobn -- binaryen C library
if (CO_WITH_BINARYEN)

add_library(cobn ${CO_BN_LINK_TYPE} src/co/bn/lib.cc)
target_include_directories(cobn
  PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/deps/libcxx/include
  PUBLIC
    ${CMAKE_CURRENT_BINARY_DIR}/binaryen-c-include
)
target_compile_options(cobn PUBLIC
  $<$<COMPILE_LANGUAGE:CXX>:-stdlib=libc++ -nostdinc++>
  $<$<COMPILE_LANGUAGE:C>:${LLVM_C_FLAGS}>
  $<$<COMPILE_LANGUAGE:CXX>:${LLVM_CXX_FLAGS}>
)
target_link_directories(cobn
  PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/deps/libcxx/lib
    ${CMAKE_CURRENT_SOURCE_DIR}/deps/zlib/lib
)
target_link_options(cobn PRIVATE "-Wl,-no_pie" ${LLVM_LD_FLAGS})
target_link_libraries(cobn PRIVATE
  binaryen
  c++abi
)

if (CO_BN_LINK_TYPE STREQUAL "SHARED")
  # make sure nothing is stripped from the static libs
  set(CO_BN_STATIC_LIBS
    ${CMAKE_CURRENT_SOURCE_DIR}/deps/libcxx/lib/libc++.a
    ${CMAKE_CURRENT_BINARY_DIR}/deps/binaryen/lib/libbinaryen.a
  )
  foreach(lib IN LISTS CO_BN_STATIC_LIBS)
    target_link_options(cobn PRIVATE "-Wl,-force_load,${lib}")
  endforeach()
else()
  # set CO_BN_STATICLIB so that we can export a dummy symbol to avoid linker warning
  target_compile_definitions(cobn PRIVATE CO_BN_STATICLIB=1)
endif()

# binaryen does not provide a clean include directory, so copy the relevant headers
file(
  COPY
    ${CMAKE_CURRENT_SOURCE_DIR}/deps/binaryen/src/binaryen-c.h
    ${CMAKE_CURRENT_SOURCE_DIR}/deps/binaryen/src/wasm-delegations.def
  DESTINATION
    ${CMAKE_CURRENT_BINARY_DIR}/binaryen-c-include/)


endif()
#————————————————————————————————————————————————————————————————————————————————————————————————
# libcollvm
if (CO_WITH_LLVM)

execute_process(
  COMMAND ${LLVM_PREFIX}/bin/llvm-config --libfiles --link-static ${CO_LLVM_COMPONENTS}
  OUTPUT_VARIABLE LLVM_LIBFILES
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
separate_arguments(LLVM_LIBFILES UNIX_COMMAND ${LLVM_LIBFILES})
file(GLOB LLD_LIBFILES "${CMAKE_CURRENT_SOURCE_DIR}/deps/llvm/lib/liblld*.a")
set(static_libs
  ${CMAKE_CURRENT_SOURCE_DIR}/deps/libcxx/lib/libc++.a
  # ${CMAKE_CURRENT_SOURCE_DIR}/deps/libcxx/lib/libc++abi.a
  ${LLVM_LIBFILES}
  ${LLD_LIBFILES}
)

add_library(collvm ${CO_LLVM_LINK_TYPE} src/co/llvm/llvmlib-dummy.cc)

if (CO_LLVM_LINK_TYPE STREQUAL "SHARED")
  # make sure nothing is stripped from the static libs
  foreach(lib IN LISTS static_libs)
    target_link_options(collvm PRIVATE "-Wl,-force_load,${lib}")
  endforeach()
endif()

# target_precompile_headers(collvm PRIVATE
#   "$<$<COMPILE_LANGUAGE:CXX>:${CMAKE_CURRENT_SOURCE_DIR}/src/co/llvm/llvm-includes.hh>"
# )
target_include_directories(collvm
  PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/deps/libcxx/include
)
target_compile_options(collvm PUBLIC
  $<$<COMPILE_LANGUAGE:CXX>:-stdlib=libc++ -nostdinc++>
  $<$<COMPILE_LANGUAGE:C>:${LLVM_C_FLAGS}>
  $<$<COMPILE_LANGUAGE:CXX>:${LLVM_CXX_FLAGS}>
)
target_link_directories(collvm PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/deps/zlib/lib
  ${CMAKE_CURRENT_SOURCE_DIR}/deps/libcxx/lib
)
target_link_options(collvm PRIVATE "-Wl,-no_pie" ${LLVM_LD_FLAGS})
target_link_libraries(collvm PRIVATE
  # c++
  c++abi
  ${LLVM_SYSTEM_LIBS}
  ${LLVM_LIBFILES}
  ${LLD_LIBFILES}
)

endif()
#————————————————————————————————————————————————————————————————————————————————————————————————
# co
add_library(colib
  src/co/build.c
  src/co/pos.c
  src/co/source.c
  src/co/types.c
  src/co/ir/constcache.c
  src/co/ir/ir-ast.c
  src/co/ir/ir-repr.c
  src/co/ir/ir.c
  src/co/ir/irbuilder.c
  src/co/ir/op.c
  src/co/parse/ast.c
  src/co/parse/ast_visit.c
  src/co/parse/ast_repr.c
  src/co/parse/convlit.c
  src/co/parse/eval.c
  src/co/parse/parse.c
  src/co/parse/resolve_sym.c
  src/co/parse/resolve_type.c
  src/co/parse/scan.c
  src/co/parse/scan_test.c
  src/co/parse/token.c
  src/co/parse/typeid.c
  src/co/parse/universe.c
  src/co/parse/validate.c
  src/co/util/array.c
  src/co/util/array_test.c
  src/co/util/ptrmap.c
  src/co/util/rtimer.c
  src/co/util/sexpr.c
  src/co/util/sym.c
  src/co/util/symmap.c
  src/co/util/tmpstr.c
  src/co/util/tstyle.c
)
target_include_directories(colib PUBLIC src)
target_link_libraries(colib PUBLIC
  rbase
  jemalloc
  xxhash
)


if (CO_WITH_LLVM OR CO_WITH_BINARYEN)
  target_link_options(colib PRIVATE "-Wl,-no_pie")
endif()
if (CO_WITH_LLVM)
  target_sources(colib PRIVATE
    src/co/llvm/llvm.c
    src/co/llvm/llvm.cc
    src/co/llvm/lld.cc
  )
  target_compile_definitions(colib PUBLIC CO_WITH_LLVM=1)
  target_link_libraries(colib PUBLIC collvm)
  target_precompile_headers(colib PRIVATE
    "$<$<COMPILE_LANGUAGE:CXX>:${CMAKE_CURRENT_SOURCE_DIR}/src/co/llvm/llvm-includes.hh>"
  )
elseif (CO_WITH_BINARYEN)
  target_sources(colib PRIVATE
    src/co/bn/test.c
    src/co/bn/bn.c
  )
  target_compile_definitions(colib PUBLIC CO_WITH_BINARYEN=1)
  target_link_libraries(colib PUBLIC cobn)
endif()


add_executable(co src/co/co.c)
target_link_libraries(co PRIVATE colib)

# make sure all unit tests are included in debug builds
if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
  ckit_force_load_lib(co colib)
endif()

# if (${CMAKE_BUILD_TYPE} MATCHES "Debug")
#   target_sources(co PRIVATE
#     src/backward-cpp/backward.cpp
#   )
# endif()


# parser parselet map generator (patches src/co/parse/parse.c)
add_custom_command(
  COMMENT "update parselets in src/co/parse/parse.c (misc/gen_parselet_map.py)"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  COMMAND python3 misc/gen_parselet_map.py
          ${CMAKE_CURRENT_SOURCE_DIR}/src/co/parse/parse.c
          ${CMAKE_CURRENT_BINARY_DIR}/gen_parselet_map.mark
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/src/co/parse/parse.c
  OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/gen_parselet_map.mark
)
add_custom_target(gen_parselet_map ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/gen_parselet_map.mark)
add_dependencies(co gen_parselet_map)


# IR op generator
add_custom_command(
  COMMENT "generate IR ops (src/co/ir/gen_ops.py)"
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  COMMAND python3 src/co/ir/gen_ops.py
  DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/src/co/ir/arch_base.lisp
          ${CMAKE_CURRENT_SOURCE_DIR}/src/co/parse/parse.h
          ${CMAKE_CURRENT_SOURCE_DIR}/src/co/types.h
  OUTPUT  ${CMAKE_CURRENT_SOURCE_DIR}/src/co/ir/op.h
          ${CMAKE_CURRENT_SOURCE_DIR}/src/co/ir/op.c
          ${CMAKE_CURRENT_SOURCE_DIR}/src/co/ir/ir-ast.c
)


# —————————————————————
# test

# colib unit tests
add_executable(test_colib src/co/co.c)
target_link_libraries(test_colib PRIVATE colib)
ckit_force_load_lib(test_colib colib) # make sure all tests in colib are included
ckit_add_test(test-colib test_colib -testonly)

# parser tests
add_executable(test_parser
  test/co-parser-test.c
)
target_link_libraries(test_parser PRIVATE colib)
ckit_add_test(test-parser test_parser -threads) # threaded
# ckit_add_test(test-parser test_parser) # not threaded; run tests one by one

# make sure co unit tests run before parser tests
add_dependencies(test_parser test_colib)



#————————————————————————————————————————————————————————————————————————————————————————————————
# rt
if (CO_ENABLE_RT)

  add_library(co-rt STATIC
    src/rt/sched.c
    src/rt/stack.c
  )
  target_link_libraries(co-rt PRIVATE rbase)

  # co-rt: platform and architecture specific source
  macro(co_rt_unsupported_system_error)
    message(FATAL_ERROR
      "co-rt: Unsupported target ${CMAKE_SYSTEM_NAME}/${CMAKE_HOST_SYSTEM_PROCESSOR}")
  endmacro()
  # CMAKE_SYSTEM_NAME = Linux | Darwin | Windows | ...
  if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    if (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_64")
      target_sources(co-rt PRIVATE src/rt/exectx/exectx_x86_64_sysv.S)
    else()
      co_rt_unsupported_system_error()
    endif()
  elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
    if (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "x86_64")
      target_sources(co-rt PRIVATE src/rt/exectx/exectx_x86_64_sysv.S)
    elseif (CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "aarch64")
      target_sources(co-rt PRIVATE src/rt/exectx/exectx_arm64_aapcs_elf.S)
    else()
      co_rt_unsupported_system_error()
    endif()
  else()
    co_rt_unsupported_system_error()
  endif()


  add_executable(co-rt-test src/rt-test/rt-test.c)
  target_include_directories(co-rt-test PRIVATE src)
  target_link_libraries(co-rt-test PRIVATE co-rt)

endif()
