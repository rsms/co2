#!/usr/bin/env python3
#
# This script reads the parselet map in <cfile> and generates <outfile>
#
import re, sys, os, os.path

srcdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
relscriptfile = os.path.relpath(os.path.abspath(__file__), srcdir)

def err(msg):
  print(msg)
  sys.exit(1)

if len(sys.argv) < 3:
  err("usage: %s <cfile> <outfile>" % sys.argv[0])

infile = sys.argv[1]
outfile = sys.argv[2]

with open(infile, "r") as f:
  source = f.read()

# //!Parselet (TPlusPlus UNARY_POSTFIX) (TMinusMinus UNARY_POSTFIX)
# //!PrefixParselet TPlus TMinus TStar TSlash
parseletp = re.compile(
  r'\n//\s*\!Parselet\s+(?P<m>(?:\([^\)]+\)[\s\r\n\/\/]*)+)\n\s*(?:static|)\s*Node\*\s*(?:nullable\s*|)(?P<fun>\w+)')
prefixparseletp = re.compile(
  r'\n//\s*\!PrefixParselet\s+([^\n]+)\n\s*(?:static|)\s*Node\*\s*(?:nullable\s*|)(\w+)')
splitspecs = re.compile(r'\)[\s\r\n\/\/]*\(')
splitsep = re.compile(r'[\s,]+')
parselets = dict()  # keyed by token, e.g. "TPlus"

for m in prefixparseletp.finditer(source):
  fun = m.group(2)
  for tok in splitsep.split(m.group(1)):
    struct_init = parselets.get(tok)
    if struct_init:
      err("duplicate parselet %s for token %s" % (fun, tok))
    parselets[tok] = [fun, "NULL", "MEMBER"]

for m in parseletp.finditer(source):
  md = m.groupdict()
  for s in splitspecs.split(md["m"]):
    tok, prec = splitsep.split(s.strip("()"), 1)
    fun = md["fun"]
    # print({ "tok": tok, "prec": prec, "fun": md["fun"] })
    struct_init = parselets.get(tok)
    if not struct_init:
      parselets[tok] = ["NULL", fun, prec]
    else:
      if struct_init[1] != "NULL":
        err("duplicate parselet %s for token %s" % (fun, tok))
      struct_init[1] = fun
      struct_init[2] = prec

# ———————————————————————————————————————————————————————————————————————————————————————
# generate output

out = [
  '// automatically generated by %s; do not edit' % relscriptfile,
]

# const Parselet parselets[Tok_MAX] = {
#   [TComment] = { PLComment, NULL, PREC_LOWEST },
# };
out.append("static const Parselet parselets[Tok_MAX] = {")
for tok, struct_init in parselets.items():
  out.append("  [%s] = {%s, %s, PREC_%s}," % (tok, *struct_init))
out.append("};")

out.append("")

print("write %s" % outfile)
with open(outfile, "w") as f:
  f.write("\n".join(out))
