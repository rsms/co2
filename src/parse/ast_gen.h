// generated by ast_gen.py -- do not edit
ASSUME_NONNULL_BEGIN

enum NodeKind {
  NBad              =  0, // struct BadNode
  NField            =  1, // struct FieldNode
  NStmt_BEG         =  2,
    NCUnit_BEG      =  2,
      NPkg          =  2, // struct PkgNode
      NFile         =  3, // struct FileNode
    NCUnit_END      =  3,
    NComment        =  4, // struct CommentNode
  NStmt_END         =  4,
  NExpr_BEG         =  5,
    NLitExpr_BEG    =  5,
      NNil          =  5, // struct NilNode
      NBoolLit      =  6, // struct BoolLitNode
      NIntLit       =  7, // struct IntLitNode
      NFloatLit     =  8, // struct FloatLitNode
      NStrLit       =  9, // struct StrLitNode
    NLitExpr_END    =  9,
    NId             = 10, // struct IdNode
    NBinOp          = 11, // struct BinOpNode
    NUnaryOp_BEG    = 12,
      NPrefixOp     = 12, // struct PrefixOpNode
      NPostfixOp    = 13, // struct PostfixOpNode
    NUnaryOp_END    = 13,
    NReturn         = 14, // struct ReturnNode
    NAssign         = 15, // struct AssignNode
    NListExpr_BEG   = 16,
      NTuple        = 16, // struct TupleNode
      NArray        = 17, // struct ArrayNode
      NBlock        = 18, // struct BlockNode
    NListExpr_END   = 18,
    NFun            = 19, // struct FunNode
    NMacro          = 20, // struct MacroNode
    NCall           = 21, // struct CallNode
    NTypeCast       = 22, // struct TypeCastNode
    NLocal_BEG      = 23,
      NConst        = 23, // struct ConstNode
      NVar          = 24, // struct VarNode
      NParam        = 25, // struct ParamNode
      NMacroParam   = 26, // struct MacroParamNode
    NLocal_END      = 26,
    NRef            = 27, // struct RefNode
    NNamedArg       = 28, // struct NamedArgNode
    NSelector       = 29, // struct SelectorNode
    NIndex          = 30, // struct IndexNode
    NSlice          = 31, // struct SliceNode
    NIf             = 32, // struct IfNode
    NTypeExpr       = 33, // struct TypeExprNode
  NExpr_END         = 33,
  NType_BEG         = 34,
    NTypeType       = 34, // struct TypeTypeNode
    NIdType         = 35, // struct IdTypeNode
    NAliasType      = 36, // struct AliasTypeNode
    NRefType        = 37, // struct RefTypeNode
    NBasicType      = 38, // struct BasicTypeNode
    NArrayType      = 39, // struct ArrayTypeNode
    NTupleType      = 40, // struct TupleTypeNode
    NStructType     = 41, // struct StructTypeNode
    NFunType        = 42, // struct FunTypeNode
    NMacroParamType = 43, // struct MacroParamTypeNode
  NType_END         = 43,
  NodeKind_MAX      = 43,
} END_ENUM(NodeKind)

// NodeKindName returns a printable name. E.g. NBad => "Bad"
const char* NodeKindName(NodeKind);

typedef struct BadNode BadNode;
typedef struct FieldNode FieldNode;
typedef struct PkgNode PkgNode;
typedef struct FileNode FileNode;
typedef struct CommentNode CommentNode;
typedef struct NilNode NilNode;
typedef struct BoolLitNode BoolLitNode;
typedef struct IntLitNode IntLitNode;
typedef struct FloatLitNode FloatLitNode;
typedef struct StrLitNode StrLitNode;
typedef struct IdNode IdNode;
typedef struct BinOpNode BinOpNode;
typedef struct PrefixOpNode PrefixOpNode;
typedef struct PostfixOpNode PostfixOpNode;
typedef struct ReturnNode ReturnNode;
typedef struct AssignNode AssignNode;
typedef struct TupleNode TupleNode;
typedef struct ArrayNode ArrayNode;
typedef struct BlockNode BlockNode;
typedef struct FunNode FunNode;
typedef struct MacroNode MacroNode;
typedef struct CallNode CallNode;
typedef struct TypeCastNode TypeCastNode;
typedef struct ConstNode ConstNode;
typedef struct VarNode VarNode;
typedef struct ParamNode ParamNode;
typedef struct MacroParamNode MacroParamNode;
typedef struct RefNode RefNode;
typedef struct NamedArgNode NamedArgNode;
typedef struct SelectorNode SelectorNode;
typedef struct IndexNode IndexNode;
typedef struct SliceNode SliceNode;
typedef struct IfNode IfNode;
typedef struct TypeExprNode TypeExprNode;
typedef struct TypeTypeNode TypeTypeNode;
typedef struct IdTypeNode IdTypeNode;
typedef struct AliasTypeNode AliasTypeNode;
typedef struct RefTypeNode RefTypeNode;
typedef struct BasicTypeNode BasicTypeNode;
typedef struct ArrayTypeNode ArrayTypeNode;
typedef struct TupleTypeNode TupleTypeNode;
typedef struct StructTypeNode StructTypeNode;
typedef struct FunTypeNode FunTypeNode;
typedef struct MacroParamTypeNode MacroParamTypeNode;

// bool NodeKindIs<kind>(NodeKind)
#define NodeKindIsStmt(k) (NStmt_BEG <= (k) && (k) <= NStmt_END)
#define NodeKindIsCUnit(k) (NCUnit_BEG <= (k) && (k) <= NCUnit_END)
#define NodeKindIsExpr(k) (NExpr_BEG <= (k) && (k) <= NExpr_END)
#define NodeKindIsLitExpr(k) (NLitExpr_BEG <= (k) && (k) <= NLitExpr_END)
#define NodeKindIsUnaryOp(k) (NUnaryOp_BEG <= (k) && (k) <= NUnaryOp_END)
#define NodeKindIsListExpr(k) (NListExpr_BEG <= (k) && (k) <= NListExpr_END)
#define NodeKindIsLocal(k) (NLocal_BEG <= (k) && (k) <= NLocal_END)
#define NodeKindIsType(k) (NType_BEG <= (k) && (k) <= NType_END)

// bool is_<kind>(const Node*)
#define is_BadNode(n) ((n)->kind==NBad)
#define is_FieldNode(n) ((n)->kind==NField)
#define is_Stmt(n) NodeKindIsStmt((n)->kind)
#define is_CUnitNode(n) NodeKindIsCUnit((n)->kind)
#define is_PkgNode(n) ((n)->kind==NPkg)
#define is_FileNode(n) ((n)->kind==NFile)
#define is_CommentNode(n) ((n)->kind==NComment)
#define is_Expr(n) NodeKindIsExpr((n)->kind)
#define is_LitExpr(n) NodeKindIsLitExpr((n)->kind)
#define is_NilNode(n) ((n)->kind==NNil)
#define is_BoolLitNode(n) ((n)->kind==NBoolLit)
#define is_IntLitNode(n) ((n)->kind==NIntLit)
#define is_FloatLitNode(n) ((n)->kind==NFloatLit)
#define is_StrLitNode(n) ((n)->kind==NStrLit)
#define is_IdNode(n) ((n)->kind==NId)
#define is_BinOpNode(n) ((n)->kind==NBinOp)
#define is_UnaryOpNode(n) NodeKindIsUnaryOp((n)->kind)
#define is_PrefixOpNode(n) ((n)->kind==NPrefixOp)
#define is_PostfixOpNode(n) ((n)->kind==NPostfixOp)
#define is_ReturnNode(n) ((n)->kind==NReturn)
#define is_AssignNode(n) ((n)->kind==NAssign)
#define is_ListExprNode(n) NodeKindIsListExpr((n)->kind)
#define is_TupleNode(n) ((n)->kind==NTuple)
#define is_ArrayNode(n) ((n)->kind==NArray)
#define is_BlockNode(n) ((n)->kind==NBlock)
#define is_FunNode(n) ((n)->kind==NFun)
#define is_MacroNode(n) ((n)->kind==NMacro)
#define is_CallNode(n) ((n)->kind==NCall)
#define is_TypeCastNode(n) ((n)->kind==NTypeCast)
#define is_LocalNode(n) NodeKindIsLocal((n)->kind)
#define is_ConstNode(n) ((n)->kind==NConst)
#define is_VarNode(n) ((n)->kind==NVar)
#define is_ParamNode(n) ((n)->kind==NParam)
#define is_MacroParamNode(n) ((n)->kind==NMacroParam)
#define is_RefNode(n) ((n)->kind==NRef)
#define is_NamedArgNode(n) ((n)->kind==NNamedArg)
#define is_SelectorNode(n) ((n)->kind==NSelector)
#define is_IndexNode(n) ((n)->kind==NIndex)
#define is_SliceNode(n) ((n)->kind==NSlice)
#define is_IfNode(n) ((n)->kind==NIf)
#define is_TypeExprNode(n) ((n)->kind==NTypeExpr)
#define is_Type(n) NodeKindIsType((n)->kind)
#define is_TypeTypeNode(n) ((n)->kind==NTypeType)
#define is_IdTypeNode(n) ((n)->kind==NIdType)
#define is_AliasTypeNode(n) ((n)->kind==NAliasType)
#define is_RefTypeNode(n) ((n)->kind==NRefType)
#define is_BasicTypeNode(n) ((n)->kind==NBasicType)
#define is_ArrayTypeNode(n) ((n)->kind==NArrayType)
#define is_TupleTypeNode(n) ((n)->kind==NTupleType)
#define is_StructTypeNode(n) ((n)->kind==NStructType)
#define is_FunTypeNode(n) ((n)->kind==NFunType)
#define is_MacroParamTypeNode(n) ((n)->kind==NMacroParamType)

// void assert_is_<kind>(const Node*)
#ifdef DEBUG
#define _assert_is1(NAME,n) ({ \
  NodeKind nk__ = assertnotnull(n)->kind; \
  assertf(NodeKindIs##NAME(nk__), "expected N%s; got N%s #%d", \
          #NAME, NodeKindName(nk__), nk__); \
})
#else
#define _assert_is1(NAME,n) ((void)0)
#endif
#define assert_is_BadNode(n) asserteq(assertnotnull(n)->kind,NBad)
#define assert_is_FieldNode(n) asserteq(assertnotnull(n)->kind,NField)
#define assert_is_Stmt(n) _assert_is1(Stmt,(n))
#define assert_is_CUnitNode(n) _assert_is1(CUnit,(n))
#define assert_is_PkgNode(n) asserteq(assertnotnull(n)->kind,NPkg)
#define assert_is_FileNode(n) asserteq(assertnotnull(n)->kind,NFile)
#define assert_is_CommentNode(n) asserteq(assertnotnull(n)->kind,NComment)
#define assert_is_Expr(n) _assert_is1(Expr,(n))
#define assert_is_LitExpr(n) _assert_is1(LitExpr,(n))
#define assert_is_NilNode(n) asserteq(assertnotnull(n)->kind,NNil)
#define assert_is_BoolLitNode(n) asserteq(assertnotnull(n)->kind,NBoolLit)
#define assert_is_IntLitNode(n) asserteq(assertnotnull(n)->kind,NIntLit)
#define assert_is_FloatLitNode(n) asserteq(assertnotnull(n)->kind,NFloatLit)
#define assert_is_StrLitNode(n) asserteq(assertnotnull(n)->kind,NStrLit)
#define assert_is_IdNode(n) asserteq(assertnotnull(n)->kind,NId)
#define assert_is_BinOpNode(n) asserteq(assertnotnull(n)->kind,NBinOp)
#define assert_is_UnaryOpNode(n) _assert_is1(UnaryOp,(n))
#define assert_is_PrefixOpNode(n) asserteq(assertnotnull(n)->kind,NPrefixOp)
#define assert_is_PostfixOpNode(n) asserteq(assertnotnull(n)->kind,NPostfixOp)
#define assert_is_ReturnNode(n) asserteq(assertnotnull(n)->kind,NReturn)
#define assert_is_AssignNode(n) asserteq(assertnotnull(n)->kind,NAssign)
#define assert_is_ListExprNode(n) _assert_is1(ListExpr,(n))
#define assert_is_TupleNode(n) asserteq(assertnotnull(n)->kind,NTuple)
#define assert_is_ArrayNode(n) asserteq(assertnotnull(n)->kind,NArray)
#define assert_is_BlockNode(n) asserteq(assertnotnull(n)->kind,NBlock)
#define assert_is_FunNode(n) asserteq(assertnotnull(n)->kind,NFun)
#define assert_is_MacroNode(n) asserteq(assertnotnull(n)->kind,NMacro)
#define assert_is_CallNode(n) asserteq(assertnotnull(n)->kind,NCall)
#define assert_is_TypeCastNode(n) asserteq(assertnotnull(n)->kind,NTypeCast)
#define assert_is_LocalNode(n) _assert_is1(Local,(n))
#define assert_is_ConstNode(n) asserteq(assertnotnull(n)->kind,NConst)
#define assert_is_VarNode(n) asserteq(assertnotnull(n)->kind,NVar)
#define assert_is_ParamNode(n) asserteq(assertnotnull(n)->kind,NParam)
#define assert_is_MacroParamNode(n) asserteq(assertnotnull(n)->kind,NMacroParam)
#define assert_is_RefNode(n) asserteq(assertnotnull(n)->kind,NRef)
#define assert_is_NamedArgNode(n) asserteq(assertnotnull(n)->kind,NNamedArg)
#define assert_is_SelectorNode(n) asserteq(assertnotnull(n)->kind,NSelector)
#define assert_is_IndexNode(n) asserteq(assertnotnull(n)->kind,NIndex)
#define assert_is_SliceNode(n) asserteq(assertnotnull(n)->kind,NSlice)
#define assert_is_IfNode(n) asserteq(assertnotnull(n)->kind,NIf)
#define assert_is_TypeExprNode(n) asserteq(assertnotnull(n)->kind,NTypeExpr)
#define assert_is_Type(n) _assert_is1(Type,(n))
#define assert_is_TypeTypeNode(n) asserteq(assertnotnull(n)->kind,NTypeType)
#define assert_is_IdTypeNode(n) asserteq(assertnotnull(n)->kind,NIdType)
#define assert_is_AliasTypeNode(n) asserteq(assertnotnull(n)->kind,NAliasType)
#define assert_is_RefTypeNode(n) asserteq(assertnotnull(n)->kind,NRefType)
#define assert_is_BasicTypeNode(n) asserteq(assertnotnull(n)->kind,NBasicType)
#define assert_is_ArrayTypeNode(n) asserteq(assertnotnull(n)->kind,NArrayType)
#define assert_is_TupleTypeNode(n) asserteq(assertnotnull(n)->kind,NTupleType)
#define assert_is_StructTypeNode(n) asserteq(assertnotnull(n)->kind,NStructType)
#define assert_is_FunTypeNode(n) asserteq(assertnotnull(n)->kind,NFunType)
#define assert_is_MacroParamTypeNode(n) asserteq(assertnotnull(n)->kind,NMacroParamType)

// T* as_T(Node* n)
// const T* as_const_T(const Node* n)
//
// Large _Generic with both const and non-const cases ("const T*" & "T*")
// are really slow to compile, so we break up the "as_" macros into two forms.
#if defined(DEBUG)
  #define as_Node(n) ({ void* np__=(n); (Node*)np__; })
  #define as_const_Node(n) ({ const void* np__=(n); (const Node*)np__; })
  #define as_BadNode(n) ({__typeof__(n) n__=(n);assert_is_BadNode(n__),(BadNode*)(n__);})
  #define as_const_BadNode(n) ({__typeof__(n) n__=(n);assert_is_BadNode(n__),(const BadNode*)(n__);})
  #define as_FieldNode(n) ({__typeof__(n) n__=(n);assert_is_FieldNode(n__),(FieldNode*)(n__);})
  #define as_const_FieldNode(n) ({__typeof__(n) n__=(n);assert_is_FieldNode(n__),(const FieldNode*)(n__);})
  #define as_PkgNode(n) ({__typeof__(n) n__=(n);assert_is_PkgNode(n__),(PkgNode*)(n__);})
  #define as_const_PkgNode(n) ({__typeof__(n) n__=(n);assert_is_PkgNode(n__),(const PkgNode*)(n__);})
  #define as_FileNode(n) ({__typeof__(n) n__=(n);assert_is_FileNode(n__),(FileNode*)(n__);})
  #define as_const_FileNode(n) ({__typeof__(n) n__=(n);assert_is_FileNode(n__),(const FileNode*)(n__);})
  #define as_CommentNode(n) ({__typeof__(n) n__=(n);assert_is_CommentNode(n__),(CommentNode*)(n__);})
  #define as_const_CommentNode(n) ({__typeof__(n) n__=(n);assert_is_CommentNode(n__),(const CommentNode*)(n__);})
  #define as_NilNode(n) ({__typeof__(n) n__=(n);assert_is_NilNode(n__),(NilNode*)(n__);})
  #define as_const_NilNode(n) ({__typeof__(n) n__=(n);assert_is_NilNode(n__),(const NilNode*)(n__);})
  #define as_BoolLitNode(n) ({__typeof__(n) n__=(n);assert_is_BoolLitNode(n__),(BoolLitNode*)(n__);})
  #define as_const_BoolLitNode(n) ({__typeof__(n) n__=(n);assert_is_BoolLitNode(n__),(const BoolLitNode*)(n__);})
  #define as_IntLitNode(n) ({__typeof__(n) n__=(n);assert_is_IntLitNode(n__),(IntLitNode*)(n__);})
  #define as_const_IntLitNode(n) ({__typeof__(n) n__=(n);assert_is_IntLitNode(n__),(const IntLitNode*)(n__);})
  #define as_FloatLitNode(n) ({__typeof__(n) n__=(n);assert_is_FloatLitNode(n__),(FloatLitNode*)(n__);})
  #define as_const_FloatLitNode(n) ({__typeof__(n) n__=(n);assert_is_FloatLitNode(n__),(const FloatLitNode*)(n__);})
  #define as_StrLitNode(n) ({__typeof__(n) n__=(n);assert_is_StrLitNode(n__),(StrLitNode*)(n__);})
  #define as_const_StrLitNode(n) ({__typeof__(n) n__=(n);assert_is_StrLitNode(n__),(const StrLitNode*)(n__);})
  #define as_IdNode(n) ({__typeof__(n) n__=(n);assert_is_IdNode(n__),(IdNode*)(n__);})
  #define as_const_IdNode(n) ({__typeof__(n) n__=(n);assert_is_IdNode(n__),(const IdNode*)(n__);})
  #define as_BinOpNode(n) ({__typeof__(n) n__=(n);assert_is_BinOpNode(n__),(BinOpNode*)(n__);})
  #define as_const_BinOpNode(n) ({__typeof__(n) n__=(n);assert_is_BinOpNode(n__),(const BinOpNode*)(n__);})
  #define as_PrefixOpNode(n) ({__typeof__(n) n__=(n);assert_is_PrefixOpNode(n__),(PrefixOpNode*)(n__);})
  #define as_const_PrefixOpNode(n) ({__typeof__(n) n__=(n);assert_is_PrefixOpNode(n__),(const PrefixOpNode*)(n__);})
  #define as_PostfixOpNode(n) ({__typeof__(n) n__=(n);assert_is_PostfixOpNode(n__),(PostfixOpNode*)(n__);})
  #define as_const_PostfixOpNode(n) ({__typeof__(n) n__=(n);assert_is_PostfixOpNode(n__),(const PostfixOpNode*)(n__);})
  #define as_ReturnNode(n) ({__typeof__(n) n__=(n);assert_is_ReturnNode(n__),(ReturnNode*)(n__);})
  #define as_const_ReturnNode(n) ({__typeof__(n) n__=(n);assert_is_ReturnNode(n__),(const ReturnNode*)(n__);})
  #define as_AssignNode(n) ({__typeof__(n) n__=(n);assert_is_AssignNode(n__),(AssignNode*)(n__);})
  #define as_const_AssignNode(n) ({__typeof__(n) n__=(n);assert_is_AssignNode(n__),(const AssignNode*)(n__);})
  #define as_TupleNode(n) ({__typeof__(n) n__=(n);assert_is_TupleNode(n__),(TupleNode*)(n__);})
  #define as_const_TupleNode(n) ({__typeof__(n) n__=(n);assert_is_TupleNode(n__),(const TupleNode*)(n__);})
  #define as_ArrayNode(n) ({__typeof__(n) n__=(n);assert_is_ArrayNode(n__),(ArrayNode*)(n__);})
  #define as_const_ArrayNode(n) ({__typeof__(n) n__=(n);assert_is_ArrayNode(n__),(const ArrayNode*)(n__);})
  #define as_BlockNode(n) ({__typeof__(n) n__=(n);assert_is_BlockNode(n__),(BlockNode*)(n__);})
  #define as_const_BlockNode(n) ({__typeof__(n) n__=(n);assert_is_BlockNode(n__),(const BlockNode*)(n__);})
  #define as_FunNode(n) ({__typeof__(n) n__=(n);assert_is_FunNode(n__),(FunNode*)(n__);})
  #define as_const_FunNode(n) ({__typeof__(n) n__=(n);assert_is_FunNode(n__),(const FunNode*)(n__);})
  #define as_MacroNode(n) ({__typeof__(n) n__=(n);assert_is_MacroNode(n__),(MacroNode*)(n__);})
  #define as_const_MacroNode(n) ({__typeof__(n) n__=(n);assert_is_MacroNode(n__),(const MacroNode*)(n__);})
  #define as_CallNode(n) ({__typeof__(n) n__=(n);assert_is_CallNode(n__),(CallNode*)(n__);})
  #define as_const_CallNode(n) ({__typeof__(n) n__=(n);assert_is_CallNode(n__),(const CallNode*)(n__);})
  #define as_TypeCastNode(n) ({__typeof__(n) n__=(n);assert_is_TypeCastNode(n__),(TypeCastNode*)(n__);})
  #define as_const_TypeCastNode(n) ({__typeof__(n) n__=(n);assert_is_TypeCastNode(n__),(const TypeCastNode*)(n__);})
  #define as_ConstNode(n) ({__typeof__(n) n__=(n);assert_is_ConstNode(n__),(ConstNode*)(n__);})
  #define as_const_ConstNode(n) ({__typeof__(n) n__=(n);assert_is_ConstNode(n__),(const ConstNode*)(n__);})
  #define as_VarNode(n) ({__typeof__(n) n__=(n);assert_is_VarNode(n__),(VarNode*)(n__);})
  #define as_const_VarNode(n) ({__typeof__(n) n__=(n);assert_is_VarNode(n__),(const VarNode*)(n__);})
  #define as_ParamNode(n) ({__typeof__(n) n__=(n);assert_is_ParamNode(n__),(ParamNode*)(n__);})
  #define as_const_ParamNode(n) ({__typeof__(n) n__=(n);assert_is_ParamNode(n__),(const ParamNode*)(n__);})
  #define as_MacroParamNode(n) ({__typeof__(n) n__=(n);assert_is_MacroParamNode(n__),(MacroParamNode*)(n__);})
  #define as_const_MacroParamNode(n) ({__typeof__(n) n__=(n);assert_is_MacroParamNode(n__),(const MacroParamNode*)(n__);})
  #define as_RefNode(n) ({__typeof__(n) n__=(n);assert_is_RefNode(n__),(RefNode*)(n__);})
  #define as_const_RefNode(n) ({__typeof__(n) n__=(n);assert_is_RefNode(n__),(const RefNode*)(n__);})
  #define as_NamedArgNode(n) ({__typeof__(n) n__=(n);assert_is_NamedArgNode(n__),(NamedArgNode*)(n__);})
  #define as_const_NamedArgNode(n) ({__typeof__(n) n__=(n);assert_is_NamedArgNode(n__),(const NamedArgNode*)(n__);})
  #define as_SelectorNode(n) ({__typeof__(n) n__=(n);assert_is_SelectorNode(n__),(SelectorNode*)(n__);})
  #define as_const_SelectorNode(n) ({__typeof__(n) n__=(n);assert_is_SelectorNode(n__),(const SelectorNode*)(n__);})
  #define as_IndexNode(n) ({__typeof__(n) n__=(n);assert_is_IndexNode(n__),(IndexNode*)(n__);})
  #define as_const_IndexNode(n) ({__typeof__(n) n__=(n);assert_is_IndexNode(n__),(const IndexNode*)(n__);})
  #define as_SliceNode(n) ({__typeof__(n) n__=(n);assert_is_SliceNode(n__),(SliceNode*)(n__);})
  #define as_const_SliceNode(n) ({__typeof__(n) n__=(n);assert_is_SliceNode(n__),(const SliceNode*)(n__);})
  #define as_IfNode(n) ({__typeof__(n) n__=(n);assert_is_IfNode(n__),(IfNode*)(n__);})
  #define as_const_IfNode(n) ({__typeof__(n) n__=(n);assert_is_IfNode(n__),(const IfNode*)(n__);})
  #define as_TypeExprNode(n) ({__typeof__(n) n__=(n);assert_is_TypeExprNode(n__),(TypeExprNode*)(n__);})
  #define as_const_TypeExprNode(n) ({__typeof__(n) n__=(n);assert_is_TypeExprNode(n__),(const TypeExprNode*)(n__);})
  #define as_TypeTypeNode(n) ({__typeof__(n) n__=(n);assert_is_TypeTypeNode(n__),(TypeTypeNode*)(n__);})
  #define as_const_TypeTypeNode(n) ({__typeof__(n) n__=(n);assert_is_TypeTypeNode(n__),(const TypeTypeNode*)(n__);})
  #define as_IdTypeNode(n) ({__typeof__(n) n__=(n);assert_is_IdTypeNode(n__),(IdTypeNode*)(n__);})
  #define as_const_IdTypeNode(n) ({__typeof__(n) n__=(n);assert_is_IdTypeNode(n__),(const IdTypeNode*)(n__);})
  #define as_AliasTypeNode(n) ({__typeof__(n) n__=(n);assert_is_AliasTypeNode(n__),(AliasTypeNode*)(n__);})
  #define as_const_AliasTypeNode(n) ({__typeof__(n) n__=(n);assert_is_AliasTypeNode(n__),(const AliasTypeNode*)(n__);})
  #define as_RefTypeNode(n) ({__typeof__(n) n__=(n);assert_is_RefTypeNode(n__),(RefTypeNode*)(n__);})
  #define as_const_RefTypeNode(n) ({__typeof__(n) n__=(n);assert_is_RefTypeNode(n__),(const RefTypeNode*)(n__);})
  #define as_BasicTypeNode(n) ({__typeof__(n) n__=(n);assert_is_BasicTypeNode(n__),(BasicTypeNode*)(n__);})
  #define as_const_BasicTypeNode(n) ({__typeof__(n) n__=(n);assert_is_BasicTypeNode(n__),(const BasicTypeNode*)(n__);})
  #define as_ArrayTypeNode(n) ({__typeof__(n) n__=(n);assert_is_ArrayTypeNode(n__),(ArrayTypeNode*)(n__);})
  #define as_const_ArrayTypeNode(n) ({__typeof__(n) n__=(n);assert_is_ArrayTypeNode(n__),(const ArrayTypeNode*)(n__);})
  #define as_TupleTypeNode(n) ({__typeof__(n) n__=(n);assert_is_TupleTypeNode(n__),(TupleTypeNode*)(n__);})
  #define as_const_TupleTypeNode(n) ({__typeof__(n) n__=(n);assert_is_TupleTypeNode(n__),(const TupleTypeNode*)(n__);})
  #define as_StructTypeNode(n) ({__typeof__(n) n__=(n);assert_is_StructTypeNode(n__),(StructTypeNode*)(n__);})
  #define as_const_StructTypeNode(n) ({__typeof__(n) n__=(n);assert_is_StructTypeNode(n__),(const StructTypeNode*)(n__);})
  #define as_FunTypeNode(n) ({__typeof__(n) n__=(n);assert_is_FunTypeNode(n__),(FunTypeNode*)(n__);})
  #define as_const_FunTypeNode(n) ({__typeof__(n) n__=(n);assert_is_FunTypeNode(n__),(const FunTypeNode*)(n__);})
  #define as_MacroParamTypeNode(n) ({__typeof__(n) n__=(n);assert_is_MacroParamTypeNode(n__),(MacroParamTypeNode*)(n__);})
  #define as_const_MacroParamTypeNode(n) ({__typeof__(n) n__=(n);assert_is_MacroParamTypeNode(n__),(const MacroParamTypeNode*)(n__);})
  #define as_Stmt(n) _Generic((n), PkgNode*:(Stmt*)(n), FileNode*:(Stmt*)(n), \
    struct CUnitNode*:(Stmt*)(n), CommentNode*:(Stmt*)(n), Stmt*:(Stmt*)(n), \
    Node*: ({__typeof__(n) n__=(n);assert_is_Stmt(n__),(Stmt*)(n__);}))
  #define as_const_Stmt(n) _Generic((n), const PkgNode*:(const Stmt*)(n), \
    const FileNode*:(const Stmt*)(n), const struct CUnitNode*:(const Stmt*)(n), \
    const CommentNode*:(const Stmt*)(n), const Stmt*:(const Stmt*)(n), \
    const Node*: ({__typeof__(n) n__=(n);assert_is_Stmt(n__),(const Stmt*)(n__);}))

  #define as_CUnitNode(n) _Generic((n), PkgNode*:(struct CUnitNode*)(n), \
    FileNode*:(struct CUnitNode*)(n), struct CUnitNode*:(struct CUnitNode*)(n), \
    Stmt*: ({__typeof__(n) n__=(n);assert_is_CUnitNode(n__),(struct CUnitNode*)(n__);}), \
    Node*: ({__typeof__(n) n__=(n);assert_is_CUnitNode(n__),(struct CUnitNode*)(n__);}))
  #define as_const_CUnitNode(n) _Generic((n), \
    const PkgNode*:(const struct CUnitNode*)(n), \
    const FileNode*:(const struct CUnitNode*)(n), \
    const struct CUnitNode*:(const struct CUnitNode*)(n), \
    const Stmt*: ({__typeof__(n) n__=(n);assert_is_CUnitNode(n__),(const struct CUnitNode*)(n__);}), \
    const Node*: ({__typeof__(n) n__=(n);assert_is_CUnitNode(n__),(const struct CUnitNode*)(n__);}))

  #define as_Expr(n) _Generic((n), NilNode*:(Expr*)(n), BoolLitNode*:(Expr*)(n), \
    IntLitNode*:(Expr*)(n), FloatLitNode*:(Expr*)(n), StrLitNode*:(Expr*)(n), \
    struct LitExpr*:(Expr*)(n), IdNode*:(Expr*)(n), BinOpNode*:(Expr*)(n), \
    PrefixOpNode*:(Expr*)(n), PostfixOpNode*:(Expr*)(n), struct UnaryOpNode*:(Expr*)(n), \
    ReturnNode*:(Expr*)(n), AssignNode*:(Expr*)(n), TupleNode*:(Expr*)(n), \
    ArrayNode*:(Expr*)(n), BlockNode*:(Expr*)(n), struct ListExprNode*:(Expr*)(n), \
    FunNode*:(Expr*)(n), MacroNode*:(Expr*)(n), CallNode*:(Expr*)(n), \
    TypeCastNode*:(Expr*)(n), ConstNode*:(Expr*)(n), VarNode*:(Expr*)(n), \
    ParamNode*:(Expr*)(n), MacroParamNode*:(Expr*)(n), struct LocalNode*:(Expr*)(n), \
    RefNode*:(Expr*)(n), NamedArgNode*:(Expr*)(n), SelectorNode*:(Expr*)(n), \
    IndexNode*:(Expr*)(n), SliceNode*:(Expr*)(n), IfNode*:(Expr*)(n), \
    TypeExprNode*:(Expr*)(n), Expr*:(Expr*)(n), \
    Node*: ({__typeof__(n) n__=(n);assert_is_Expr(n__),(Expr*)(n__);}))
  #define as_const_Expr(n) _Generic((n), const NilNode*:(const Expr*)(n), \
    const BoolLitNode*:(const Expr*)(n), const IntLitNode*:(const Expr*)(n), \
    const FloatLitNode*:(const Expr*)(n), const StrLitNode*:(const Expr*)(n), \
    const struct LitExpr*:(const Expr*)(n), const IdNode*:(const Expr*)(n), \
    const BinOpNode*:(const Expr*)(n), const PrefixOpNode*:(const Expr*)(n), \
    const PostfixOpNode*:(const Expr*)(n), const struct UnaryOpNode*:(const Expr*)(n), \
    const ReturnNode*:(const Expr*)(n), const AssignNode*:(const Expr*)(n), \
    const TupleNode*:(const Expr*)(n), const ArrayNode*:(const Expr*)(n), \
    const BlockNode*:(const Expr*)(n), const struct ListExprNode*:(const Expr*)(n), \
    const FunNode*:(const Expr*)(n), const MacroNode*:(const Expr*)(n), \
    const CallNode*:(const Expr*)(n), const TypeCastNode*:(const Expr*)(n), \
    const ConstNode*:(const Expr*)(n), const VarNode*:(const Expr*)(n), \
    const ParamNode*:(const Expr*)(n), const MacroParamNode*:(const Expr*)(n), \
    const struct LocalNode*:(const Expr*)(n), const RefNode*:(const Expr*)(n), \
    const NamedArgNode*:(const Expr*)(n), const SelectorNode*:(const Expr*)(n), \
    const IndexNode*:(const Expr*)(n), const SliceNode*:(const Expr*)(n), \
    const IfNode*:(const Expr*)(n), const TypeExprNode*:(const Expr*)(n), \
    const Expr*:(const Expr*)(n), \
    const Node*: ({__typeof__(n) n__=(n);assert_is_Expr(n__),(const Expr*)(n__);}))

  #define as_LitExpr(n) _Generic((n), NilNode*:(struct LitExpr*)(n), \
    BoolLitNode*:(struct LitExpr*)(n), IntLitNode*:(struct LitExpr*)(n), \
    FloatLitNode*:(struct LitExpr*)(n), StrLitNode*:(struct LitExpr*)(n), \
    struct LitExpr*:(struct LitExpr*)(n), \
    Expr*: ({__typeof__(n) n__=(n);assert_is_LitExpr(n__),(struct LitExpr*)(n__);}), \
    Node*: ({__typeof__(n) n__=(n);assert_is_LitExpr(n__),(struct LitExpr*)(n__);}))
  #define as_const_LitExpr(n) _Generic((n), const NilNode*:(const struct LitExpr*)(n), \
    const BoolLitNode*:(const struct LitExpr*)(n), \
    const IntLitNode*:(const struct LitExpr*)(n), \
    const FloatLitNode*:(const struct LitExpr*)(n), \
    const StrLitNode*:(const struct LitExpr*)(n), \
    const struct LitExpr*:(const struct LitExpr*)(n), \
    const Expr*: ({__typeof__(n) n__=(n);assert_is_LitExpr(n__),(const struct LitExpr*)(n__);}), \
    const Node*: ({__typeof__(n) n__=(n);assert_is_LitExpr(n__),(const struct LitExpr*)(n__);}))

  #define as_UnaryOpNode(n) _Generic((n), PrefixOpNode*:(struct UnaryOpNode*)(n), \
    PostfixOpNode*:(struct UnaryOpNode*)(n), \
    struct UnaryOpNode*:(struct UnaryOpNode*)(n), \
    Expr*: ({__typeof__(n) n__=(n);assert_is_UnaryOpNode(n__),(struct UnaryOpNode*)(n__);}), \
    Node*: ({__typeof__(n) n__=(n);assert_is_UnaryOpNode(n__),(struct UnaryOpNode*)(n__);}))
  #define as_const_UnaryOpNode(n) _Generic((n), \
    const PrefixOpNode*:(const struct UnaryOpNode*)(n), \
    const PostfixOpNode*:(const struct UnaryOpNode*)(n), \
    const struct UnaryOpNode*:(const struct UnaryOpNode*)(n), \
    const Expr*: ({__typeof__(n) n__=(n);assert_is_UnaryOpNode(n__),(const struct UnaryOpNode*)(n__);}), \
    const Node*: ({__typeof__(n) n__=(n);assert_is_UnaryOpNode(n__),(const struct UnaryOpNode*)(n__);}))

  #define as_ListExprNode(n) _Generic((n), TupleNode*:(struct ListExprNode*)(n), \
    ArrayNode*:(struct ListExprNode*)(n), BlockNode*:(struct ListExprNode*)(n), \
    struct ListExprNode*:(struct ListExprNode*)(n), \
    Expr*: ({__typeof__(n) n__=(n);assert_is_ListExprNode(n__),(struct ListExprNode*)(n__);}), \
    Node*: ({__typeof__(n) n__=(n);assert_is_ListExprNode(n__),(struct ListExprNode*)(n__);}))
  #define as_const_ListExprNode(n) _Generic((n), \
    const TupleNode*:(const struct ListExprNode*)(n), \
    const ArrayNode*:(const struct ListExprNode*)(n), \
    const BlockNode*:(const struct ListExprNode*)(n), \
    const struct ListExprNode*:(const struct ListExprNode*)(n), \
    const Expr*: ({__typeof__(n) n__=(n);assert_is_ListExprNode(n__),(const struct ListExprNode*)(n__);}), \
    const Node*: ({__typeof__(n) n__=(n);assert_is_ListExprNode(n__),(const struct ListExprNode*)(n__);}))

  #define as_LocalNode(n) _Generic((n), ConstNode*:(struct LocalNode*)(n), \
    VarNode*:(struct LocalNode*)(n), ParamNode*:(struct LocalNode*)(n), \
    MacroParamNode*:(struct LocalNode*)(n), struct LocalNode*:(struct LocalNode*)(n), \
    Expr*: ({__typeof__(n) n__=(n);assert_is_LocalNode(n__),(struct LocalNode*)(n__);}), \
    Node*: ({__typeof__(n) n__=(n);assert_is_LocalNode(n__),(struct LocalNode*)(n__);}))
  #define as_const_LocalNode(n) _Generic((n), \
    const ConstNode*:(const struct LocalNode*)(n), \
    const VarNode*:(const struct LocalNode*)(n), \
    const ParamNode*:(const struct LocalNode*)(n), \
    const MacroParamNode*:(const struct LocalNode*)(n), \
    const struct LocalNode*:(const struct LocalNode*)(n), \
    const Expr*: ({__typeof__(n) n__=(n);assert_is_LocalNode(n__),(const struct LocalNode*)(n__);}), \
    const Node*: ({__typeof__(n) n__=(n);assert_is_LocalNode(n__),(const struct LocalNode*)(n__);}))

  #define as_Type(n) _Generic((n), TypeTypeNode*:(Type*)(n), IdTypeNode*:(Type*)(n), \
    AliasTypeNode*:(Type*)(n), RefTypeNode*:(Type*)(n), BasicTypeNode*:(Type*)(n), \
    ArrayTypeNode*:(Type*)(n), TupleTypeNode*:(Type*)(n), StructTypeNode*:(Type*)(n), \
    FunTypeNode*:(Type*)(n), MacroParamTypeNode*:(Type*)(n), Type*:(Type*)(n), \
    Node*: ({__typeof__(n) n__=(n);assert_is_Type(n__),(Type*)(n__);}))
  #define as_const_Type(n) _Generic((n), const TypeTypeNode*:(const Type*)(n), \
    const IdTypeNode*:(const Type*)(n), const AliasTypeNode*:(const Type*)(n), \
    const RefTypeNode*:(const Type*)(n), const BasicTypeNode*:(const Type*)(n), \
    const ArrayTypeNode*:(const Type*)(n), const TupleTypeNode*:(const Type*)(n), \
    const StructTypeNode*:(const Type*)(n), const FunTypeNode*:(const Type*)(n), \
    const MacroParamTypeNode*:(const Type*)(n), const Type*:(const Type*)(n), \
    const Node*: ({__typeof__(n) n__=(n);assert_is_Type(n__),(const Type*)(n__);}))

#else // !defined(DEBUG)
  #define as_Node(n) ({ void* np__=(n); (Node*)np__; })
  #define as_const_Node(n) ({ const void* np__=(n); (const Node*)np__; })
  #define as_BadNode(n) ({ void* np__=(n); (BadNode*)np__; })
  #define as_const_BadNode(n) ({ const void* np__=(n); (const BadNode*)np__; })
  #define as_FieldNode(n) ({ void* np__=(n); (FieldNode*)np__; })
  #define as_const_FieldNode(n) ({ const void* np__=(n); (const FieldNode*)np__; })
  #define as_PkgNode(n) ({ void* np__=(n); (PkgNode*)np__; })
  #define as_const_PkgNode(n) ({ const void* np__=(n); (const PkgNode*)np__; })
  #define as_FileNode(n) ({ void* np__=(n); (FileNode*)np__; })
  #define as_const_FileNode(n) ({ const void* np__=(n); (const FileNode*)np__; })
  #define as_CommentNode(n) ({ void* np__=(n); (CommentNode*)np__; })
  #define as_const_CommentNode(n) ({ const void* np__=(n); (const CommentNode*)np__; })
  #define as_NilNode(n) ({ void* np__=(n); (NilNode*)np__; })
  #define as_const_NilNode(n) ({ const void* np__=(n); (const NilNode*)np__; })
  #define as_BoolLitNode(n) ({ void* np__=(n); (BoolLitNode*)np__; })
  #define as_const_BoolLitNode(n) ({ const void* np__=(n); (const BoolLitNode*)np__; })
  #define as_IntLitNode(n) ({ void* np__=(n); (IntLitNode*)np__; })
  #define as_const_IntLitNode(n) ({ const void* np__=(n); (const IntLitNode*)np__; })
  #define as_FloatLitNode(n) ({ void* np__=(n); (FloatLitNode*)np__; })
  #define as_const_FloatLitNode(n) ({ const void* np__=(n); (const FloatLitNode*)np__; })
  #define as_StrLitNode(n) ({ void* np__=(n); (StrLitNode*)np__; })
  #define as_const_StrLitNode(n) ({ const void* np__=(n); (const StrLitNode*)np__; })
  #define as_IdNode(n) ({ void* np__=(n); (IdNode*)np__; })
  #define as_const_IdNode(n) ({ const void* np__=(n); (const IdNode*)np__; })
  #define as_BinOpNode(n) ({ void* np__=(n); (BinOpNode*)np__; })
  #define as_const_BinOpNode(n) ({ const void* np__=(n); (const BinOpNode*)np__; })
  #define as_PrefixOpNode(n) ({ void* np__=(n); (PrefixOpNode*)np__; })
  #define as_const_PrefixOpNode(n) ({ const void* np__=(n); (const PrefixOpNode*)np__; })
  #define as_PostfixOpNode(n) ({ void* np__=(n); (PostfixOpNode*)np__; })
  #define as_const_PostfixOpNode(n) ({ const void* np__=(n); (const PostfixOpNode*)np__; })
  #define as_ReturnNode(n) ({ void* np__=(n); (ReturnNode*)np__; })
  #define as_const_ReturnNode(n) ({ const void* np__=(n); (const ReturnNode*)np__; })
  #define as_AssignNode(n) ({ void* np__=(n); (AssignNode*)np__; })
  #define as_const_AssignNode(n) ({ const void* np__=(n); (const AssignNode*)np__; })
  #define as_TupleNode(n) ({ void* np__=(n); (TupleNode*)np__; })
  #define as_const_TupleNode(n) ({ const void* np__=(n); (const TupleNode*)np__; })
  #define as_ArrayNode(n) ({ void* np__=(n); (ArrayNode*)np__; })
  #define as_const_ArrayNode(n) ({ const void* np__=(n); (const ArrayNode*)np__; })
  #define as_BlockNode(n) ({ void* np__=(n); (BlockNode*)np__; })
  #define as_const_BlockNode(n) ({ const void* np__=(n); (const BlockNode*)np__; })
  #define as_FunNode(n) ({ void* np__=(n); (FunNode*)np__; })
  #define as_const_FunNode(n) ({ const void* np__=(n); (const FunNode*)np__; })
  #define as_MacroNode(n) ({ void* np__=(n); (MacroNode*)np__; })
  #define as_const_MacroNode(n) ({ const void* np__=(n); (const MacroNode*)np__; })
  #define as_CallNode(n) ({ void* np__=(n); (CallNode*)np__; })
  #define as_const_CallNode(n) ({ const void* np__=(n); (const CallNode*)np__; })
  #define as_TypeCastNode(n) ({ void* np__=(n); (TypeCastNode*)np__; })
  #define as_const_TypeCastNode(n) ({ const void* np__=(n); (const TypeCastNode*)np__; })
  #define as_ConstNode(n) ({ void* np__=(n); (ConstNode*)np__; })
  #define as_const_ConstNode(n) ({ const void* np__=(n); (const ConstNode*)np__; })
  #define as_VarNode(n) ({ void* np__=(n); (VarNode*)np__; })
  #define as_const_VarNode(n) ({ const void* np__=(n); (const VarNode*)np__; })
  #define as_ParamNode(n) ({ void* np__=(n); (ParamNode*)np__; })
  #define as_const_ParamNode(n) ({ const void* np__=(n); (const ParamNode*)np__; })
  #define as_MacroParamNode(n) ({ void* np__=(n); (MacroParamNode*)np__; })
  #define as_const_MacroParamNode(n) ({ const void* np__=(n); (const MacroParamNode*)np__; })
  #define as_RefNode(n) ({ void* np__=(n); (RefNode*)np__; })
  #define as_const_RefNode(n) ({ const void* np__=(n); (const RefNode*)np__; })
  #define as_NamedArgNode(n) ({ void* np__=(n); (NamedArgNode*)np__; })
  #define as_const_NamedArgNode(n) ({ const void* np__=(n); (const NamedArgNode*)np__; })
  #define as_SelectorNode(n) ({ void* np__=(n); (SelectorNode*)np__; })
  #define as_const_SelectorNode(n) ({ const void* np__=(n); (const SelectorNode*)np__; })
  #define as_IndexNode(n) ({ void* np__=(n); (IndexNode*)np__; })
  #define as_const_IndexNode(n) ({ const void* np__=(n); (const IndexNode*)np__; })
  #define as_SliceNode(n) ({ void* np__=(n); (SliceNode*)np__; })
  #define as_const_SliceNode(n) ({ const void* np__=(n); (const SliceNode*)np__; })
  #define as_IfNode(n) ({ void* np__=(n); (IfNode*)np__; })
  #define as_const_IfNode(n) ({ const void* np__=(n); (const IfNode*)np__; })
  #define as_TypeExprNode(n) ({ void* np__=(n); (TypeExprNode*)np__; })
  #define as_const_TypeExprNode(n) ({ const void* np__=(n); (const TypeExprNode*)np__; })
  #define as_TypeTypeNode(n) ({ void* np__=(n); (TypeTypeNode*)np__; })
  #define as_const_TypeTypeNode(n) ({ const void* np__=(n); (const TypeTypeNode*)np__; })
  #define as_IdTypeNode(n) ({ void* np__=(n); (IdTypeNode*)np__; })
  #define as_const_IdTypeNode(n) ({ const void* np__=(n); (const IdTypeNode*)np__; })
  #define as_AliasTypeNode(n) ({ void* np__=(n); (AliasTypeNode*)np__; })
  #define as_const_AliasTypeNode(n) ({ const void* np__=(n); (const AliasTypeNode*)np__; })
  #define as_RefTypeNode(n) ({ void* np__=(n); (RefTypeNode*)np__; })
  #define as_const_RefTypeNode(n) ({ const void* np__=(n); (const RefTypeNode*)np__; })
  #define as_BasicTypeNode(n) ({ void* np__=(n); (BasicTypeNode*)np__; })
  #define as_const_BasicTypeNode(n) ({ const void* np__=(n); (const BasicTypeNode*)np__; })
  #define as_ArrayTypeNode(n) ({ void* np__=(n); (ArrayTypeNode*)np__; })
  #define as_const_ArrayTypeNode(n) ({ const void* np__=(n); (const ArrayTypeNode*)np__; })
  #define as_TupleTypeNode(n) ({ void* np__=(n); (TupleTypeNode*)np__; })
  #define as_const_TupleTypeNode(n) ({ const void* np__=(n); (const TupleTypeNode*)np__; })
  #define as_StructTypeNode(n) ({ void* np__=(n); (StructTypeNode*)np__; })
  #define as_const_StructTypeNode(n) ({ const void* np__=(n); (const StructTypeNode*)np__; })
  #define as_FunTypeNode(n) ({ void* np__=(n); (FunTypeNode*)np__; })
  #define as_const_FunTypeNode(n) ({ const void* np__=(n); (const FunTypeNode*)np__; })
  #define as_MacroParamTypeNode(n) ({ void* np__=(n); (MacroParamTypeNode*)np__; })
  #define as_const_MacroParamTypeNode(n) ({ const void* np__=(n); (const MacroParamTypeNode*)np__; })
  #define as_Stmt(n) ({ void* np__=(n); (Stmt*)np__; })
  #define as_const_Stmt(n) ({ const void* np__=(n); (const Stmt*)np__; })
  #define as_CUnitNode(n) ({ void* np__=(n); (struct CUnitNode*)np__; })
  #define as_const_CUnitNode(n) ({ const void* np__=(n); (const struct CUnitNode*)np__; })
  #define as_Expr(n) ({ void* np__=(n); (Expr*)np__; })
  #define as_const_Expr(n) ({ const void* np__=(n); (const Expr*)np__; })
  #define as_LitExpr(n) ({ void* np__=(n); (struct LitExpr*)np__; })
  #define as_const_LitExpr(n) ({ const void* np__=(n); (const struct LitExpr*)np__; })
  #define as_UnaryOpNode(n) ({ void* np__=(n); (struct UnaryOpNode*)np__; })
  #define as_const_UnaryOpNode(n) ({ const void* np__=(n); (const struct UnaryOpNode*)np__; })
  #define as_ListExprNode(n) ({ void* np__=(n); (struct ListExprNode*)np__; })
  #define as_const_ListExprNode(n) ({ const void* np__=(n); (const struct ListExprNode*)np__; })
  #define as_LocalNode(n) ({ void* np__=(n); (struct LocalNode*)np__; })
  #define as_const_LocalNode(n) ({ const void* np__=(n); (const struct LocalNode*)np__; })
  #define as_Type(n) ({ void* np__=(n); (Type*)np__; })
  #define as_const_Type(n) ({ const void* np__=(n); (const Type*)np__; })
#endif // DEBUG

// <type>* nullable maybe_<type>(Node* n)
// const <type>* nullable maybe_<type>(const Node* n)
#define maybe_BadNode(n) ({__typeof__(n) n__=(n);is_BadNode(n__)?(BadNode*)(n__):NULL;})
#define maybe_FieldNode(n) ({__typeof__(n) n__=(n);is_FieldNode(n__)?(FieldNode*)(n__):NULL;})
#define maybe_Stmt(n) ({__typeof__(n) n__=(n);is_Stmt(n__)?as_Stmt(n__):NULL;})
#define maybe_CUnitNode(n) ({__typeof__(n) n__=(n);is_CUnitNode(n__)?as_CUnitNode(n__):NULL;})
#define maybe_PkgNode(n) ({__typeof__(n) n__=(n);is_PkgNode(n__)?(PkgNode*)(n__):NULL;})
#define maybe_FileNode(n) ({__typeof__(n) n__=(n);is_FileNode(n__)?(FileNode*)(n__):NULL;})
#define maybe_CommentNode(n) ({__typeof__(n) n__=(n);is_CommentNode(n__)?(CommentNode*)(n__):NULL;})
#define maybe_Expr(n) ({__typeof__(n) n__=(n);is_Expr(n__)?as_Expr(n__):NULL;})
#define maybe_LitExpr(n) ({__typeof__(n) n__=(n);is_LitExpr(n__)?as_LitExpr(n__):NULL;})
#define maybe_NilNode(n) ({__typeof__(n) n__=(n);is_NilNode(n__)?(NilNode*)(n__):NULL;})
#define maybe_BoolLitNode(n) ({__typeof__(n) n__=(n);is_BoolLitNode(n__)?(BoolLitNode*)(n__):NULL;})
#define maybe_IntLitNode(n) ({__typeof__(n) n__=(n);is_IntLitNode(n__)?(IntLitNode*)(n__):NULL;})
#define maybe_FloatLitNode(n) ({__typeof__(n) n__=(n);is_FloatLitNode(n__)?(FloatLitNode*)(n__):NULL;})
#define maybe_StrLitNode(n) ({__typeof__(n) n__=(n);is_StrLitNode(n__)?(StrLitNode*)(n__):NULL;})
#define maybe_IdNode(n) ({__typeof__(n) n__=(n);is_IdNode(n__)?(IdNode*)(n__):NULL;})
#define maybe_BinOpNode(n) ({__typeof__(n) n__=(n);is_BinOpNode(n__)?(BinOpNode*)(n__):NULL;})
#define maybe_UnaryOpNode(n) ({__typeof__(n) n__=(n);is_UnaryOpNode(n__)?as_UnaryOpNode(n__):NULL;})
#define maybe_PrefixOpNode(n) ({__typeof__(n) n__=(n);is_PrefixOpNode(n__)?(PrefixOpNode*)(n__):NULL;})
#define maybe_PostfixOpNode(n) ({__typeof__(n) n__=(n);is_PostfixOpNode(n__)?(PostfixOpNode*)(n__):NULL;})
#define maybe_ReturnNode(n) ({__typeof__(n) n__=(n);is_ReturnNode(n__)?(ReturnNode*)(n__):NULL;})
#define maybe_AssignNode(n) ({__typeof__(n) n__=(n);is_AssignNode(n__)?(AssignNode*)(n__):NULL;})
#define maybe_ListExprNode(n) ({__typeof__(n) n__=(n);is_ListExprNode(n__)?as_ListExprNode(n__):NULL;})
#define maybe_TupleNode(n) ({__typeof__(n) n__=(n);is_TupleNode(n__)?(TupleNode*)(n__):NULL;})
#define maybe_ArrayNode(n) ({__typeof__(n) n__=(n);is_ArrayNode(n__)?(ArrayNode*)(n__):NULL;})
#define maybe_BlockNode(n) ({__typeof__(n) n__=(n);is_BlockNode(n__)?(BlockNode*)(n__):NULL;})
#define maybe_FunNode(n) ({__typeof__(n) n__=(n);is_FunNode(n__)?(FunNode*)(n__):NULL;})
#define maybe_MacroNode(n) ({__typeof__(n) n__=(n);is_MacroNode(n__)?(MacroNode*)(n__):NULL;})
#define maybe_CallNode(n) ({__typeof__(n) n__=(n);is_CallNode(n__)?(CallNode*)(n__):NULL;})
#define maybe_TypeCastNode(n) ({__typeof__(n) n__=(n);is_TypeCastNode(n__)?(TypeCastNode*)(n__):NULL;})
#define maybe_LocalNode(n) ({__typeof__(n) n__=(n);is_LocalNode(n__)?as_LocalNode(n__):NULL;})
#define maybe_ConstNode(n) ({__typeof__(n) n__=(n);is_ConstNode(n__)?(ConstNode*)(n__):NULL;})
#define maybe_VarNode(n) ({__typeof__(n) n__=(n);is_VarNode(n__)?(VarNode*)(n__):NULL;})
#define maybe_ParamNode(n) ({__typeof__(n) n__=(n);is_ParamNode(n__)?(ParamNode*)(n__):NULL;})
#define maybe_MacroParamNode(n) ({__typeof__(n) n__=(n);is_MacroParamNode(n__)?(MacroParamNode*)(n__):NULL;})
#define maybe_RefNode(n) ({__typeof__(n) n__=(n);is_RefNode(n__)?(RefNode*)(n__):NULL;})
#define maybe_NamedArgNode(n) ({__typeof__(n) n__=(n);is_NamedArgNode(n__)?(NamedArgNode*)(n__):NULL;})
#define maybe_SelectorNode(n) ({__typeof__(n) n__=(n);is_SelectorNode(n__)?(SelectorNode*)(n__):NULL;})
#define maybe_IndexNode(n) ({__typeof__(n) n__=(n);is_IndexNode(n__)?(IndexNode*)(n__):NULL;})
#define maybe_SliceNode(n) ({__typeof__(n) n__=(n);is_SliceNode(n__)?(SliceNode*)(n__):NULL;})
#define maybe_IfNode(n) ({__typeof__(n) n__=(n);is_IfNode(n__)?(IfNode*)(n__):NULL;})
#define maybe_TypeExprNode(n) ({__typeof__(n) n__=(n);is_TypeExprNode(n__)?(TypeExprNode*)(n__):NULL;})
#define maybe_Type(n) ({__typeof__(n) n__=(n);is_Type(n__)?as_Type(n__):NULL;})
#define maybe_TypeTypeNode(n) ({__typeof__(n) n__=(n);is_TypeTypeNode(n__)?(TypeTypeNode*)(n__):NULL;})
#define maybe_IdTypeNode(n) ({__typeof__(n) n__=(n);is_IdTypeNode(n__)?(IdTypeNode*)(n__):NULL;})
#define maybe_AliasTypeNode(n) ({__typeof__(n) n__=(n);is_AliasTypeNode(n__)?(AliasTypeNode*)(n__):NULL;})
#define maybe_RefTypeNode(n) ({__typeof__(n) n__=(n);is_RefTypeNode(n__)?(RefTypeNode*)(n__):NULL;})
#define maybe_BasicTypeNode(n) ({__typeof__(n) n__=(n);is_BasicTypeNode(n__)?(BasicTypeNode*)(n__):NULL;})
#define maybe_ArrayTypeNode(n) ({__typeof__(n) n__=(n);is_ArrayTypeNode(n__)?(ArrayTypeNode*)(n__):NULL;})
#define maybe_TupleTypeNode(n) ({__typeof__(n) n__=(n);is_TupleTypeNode(n__)?(TupleTypeNode*)(n__):NULL;})
#define maybe_StructTypeNode(n) ({__typeof__(n) n__=(n);is_StructTypeNode(n__)?(StructTypeNode*)(n__):NULL;})
#define maybe_FunTypeNode(n) ({__typeof__(n) n__=(n);is_FunTypeNode(n__)?(FunTypeNode*)(n__):NULL;})
#define maybe_MacroParamTypeNode(n) ({__typeof__(n) n__=(n);is_MacroParamTypeNode(n__)?(MacroParamTypeNode*)(n__):NULL;})

// Type* nullable TypeOfNode(Node* n)
// Type* TypeOfNode(Type* n)
#define TypeOfNode(n) _Generic((n), const TypeTypeNode*:(const Type*)kType_type, \
  TypeTypeNode*:kType_type, const IdTypeNode*:(const Type*)kType_type, \
  IdTypeNode*:kType_type, const AliasTypeNode*:(const Type*)kType_type, \
  AliasTypeNode*:kType_type, const RefTypeNode*:(const Type*)kType_type, \
  RefTypeNode*:kType_type, const BasicTypeNode*:(const Type*)kType_type, \
  BasicTypeNode*:kType_type, const ArrayTypeNode*:(const Type*)kType_type, \
  ArrayTypeNode*:kType_type, const TupleTypeNode*:(const Type*)kType_type, \
  TupleTypeNode*:kType_type, const StructTypeNode*:(const Type*)kType_type, \
  StructTypeNode*:kType_type, const FunTypeNode*:(const Type*)kType_type, \
  FunTypeNode*:kType_type, const MacroParamTypeNode*:(const Type*)kType_type, \
  MacroParamTypeNode*:kType_type, const Type*:(const Type*)kType_type, Type*:kType_type, \
  const NilNode*:(const Type*)((Expr*)(n))->type, NilNode*:((Expr*)(n))->type, \
  const BoolLitNode*:(const Type*)((Expr*)(n))->type, BoolLitNode*:((Expr*)(n))->type, \
  const IntLitNode*:(const Type*)((Expr*)(n))->type, IntLitNode*:((Expr*)(n))->type, \
  const FloatLitNode*:(const Type*)((Expr*)(n))->type, FloatLitNode*:((Expr*)(n))->type, \
  const StrLitNode*:(const Type*)((Expr*)(n))->type, StrLitNode*:((Expr*)(n))->type, \
  const struct LitExpr*:(const Type*)((Expr*)(n))->type, \
  struct LitExpr*:((Expr*)(n))->type, const IdNode*:(const Type*)((Expr*)(n))->type, \
  IdNode*:((Expr*)(n))->type, const BinOpNode*:(const Type*)((Expr*)(n))->type, \
  BinOpNode*:((Expr*)(n))->type, const PrefixOpNode*:(const Type*)((Expr*)(n))->type, \
  PrefixOpNode*:((Expr*)(n))->type, \
  const PostfixOpNode*:(const Type*)((Expr*)(n))->type, \
  PostfixOpNode*:((Expr*)(n))->type, \
  const struct UnaryOpNode*:(const Type*)((Expr*)(n))->type, \
  struct UnaryOpNode*:((Expr*)(n))->type, \
  const ReturnNode*:(const Type*)((Expr*)(n))->type, ReturnNode*:((Expr*)(n))->type, \
  const AssignNode*:(const Type*)((Expr*)(n))->type, AssignNode*:((Expr*)(n))->type, \
  const TupleNode*:(const Type*)((Expr*)(n))->type, TupleNode*:((Expr*)(n))->type, \
  const ArrayNode*:(const Type*)((Expr*)(n))->type, ArrayNode*:((Expr*)(n))->type, \
  const BlockNode*:(const Type*)((Expr*)(n))->type, BlockNode*:((Expr*)(n))->type, \
  const struct ListExprNode*:(const Type*)((Expr*)(n))->type, \
  struct ListExprNode*:((Expr*)(n))->type, \
  const FunNode*:(const Type*)((Expr*)(n))->type, FunNode*:((Expr*)(n))->type, \
  const MacroNode*:(const Type*)((Expr*)(n))->type, MacroNode*:((Expr*)(n))->type, \
  const CallNode*:(const Type*)((Expr*)(n))->type, CallNode*:((Expr*)(n))->type, \
  const TypeCastNode*:(const Type*)((Expr*)(n))->type, TypeCastNode*:((Expr*)(n))->type, \
  const ConstNode*:(const Type*)((Expr*)(n))->type, ConstNode*:((Expr*)(n))->type, \
  const VarNode*:(const Type*)((Expr*)(n))->type, VarNode*:((Expr*)(n))->type, \
  const ParamNode*:(const Type*)((Expr*)(n))->type, ParamNode*:((Expr*)(n))->type, \
  const MacroParamNode*:(const Type*)((Expr*)(n))->type, \
  MacroParamNode*:((Expr*)(n))->type, \
  const struct LocalNode*:(const Type*)((Expr*)(n))->type, \
  struct LocalNode*:((Expr*)(n))->type, const RefNode*:(const Type*)((Expr*)(n))->type, \
  RefNode*:((Expr*)(n))->type, const NamedArgNode*:(const Type*)((Expr*)(n))->type, \
  NamedArgNode*:((Expr*)(n))->type, const SelectorNode*:(const Type*)((Expr*)(n))->type, \
  SelectorNode*:((Expr*)(n))->type, const IndexNode*:(const Type*)((Expr*)(n))->type, \
  IndexNode*:((Expr*)(n))->type, const SliceNode*:(const Type*)((Expr*)(n))->type, \
  SliceNode*:((Expr*)(n))->type, const IfNode*:(const Type*)((Expr*)(n))->type, \
  IfNode*:((Expr*)(n))->type, const TypeExprNode*:(const Type*)((Expr*)(n))->type, \
  TypeExprNode*:((Expr*)(n))->type, const Expr*:(const Type*)((Expr*)(n))->type, \
  Expr*:((Expr*)(n))->type, BadNode*:NULL, FieldNode*:NULL, Stmt*:NULL, \
  struct CUnitNode*:NULL, PkgNode*:NULL, FileNode*:NULL, CommentNode*:NULL, \
  const Node*:({__typeof__(n) n__=(n); is_Type(n__) ? (const Type*)kType_type \
   : is_Expr(n__) ? (const Type*)((Expr*)n__)->type : NULL; }), \
  Node*:({__typeof__(n) n__=(n); is_Type(n__) ? (Type*)kType_type \
   : is_Expr(n__) ? ((Expr*)n__)->type : NULL; }))

// unions
typedef union CUnitNode_union {
  Node     Node;
  Stmt     Stmt;
  PkgNode  PkgNode;
  FileNode FileNode;
} CUnitNode_union;
typedef union Stmt_union {
  Node            Node;
  CUnitNode_union CUnitNode;
  CommentNode     CommentNode;
} Stmt_union;
typedef union LitExpr_union {
  Node         Node;
  Expr         Expr;
  NilNode      NilNode;
  BoolLitNode  BoolLitNode;
  IntLitNode   IntLitNode;
  FloatLitNode FloatLitNode;
  StrLitNode   StrLitNode;
} LitExpr_union;
typedef union UnaryOpNode_union {
  Node          Node;
  Expr          Expr;
  PrefixOpNode  PrefixOpNode;
  PostfixOpNode PostfixOpNode;
} UnaryOpNode_union;
typedef union ListExprNode_union {
  Node      Node;
  Expr      Expr;
  TupleNode TupleNode;
  ArrayNode ArrayNode;
  BlockNode BlockNode;
} ListExprNode_union;
typedef union LocalNode_union {
  Node           Node;
  Expr           Expr;
  ConstNode      ConstNode;
  VarNode        VarNode;
  ParamNode      ParamNode;
  MacroParamNode MacroParamNode;
} LocalNode_union;
typedef union Expr_union {
  Node               Node;
  LitExpr_union      LitExpr;
  IdNode             IdNode;
  BinOpNode          BinOpNode;
  UnaryOpNode_union  UnaryOpNode;
  ReturnNode         ReturnNode;
  AssignNode         AssignNode;
  ListExprNode_union ListExprNode;
  FunNode            FunNode;
  MacroNode          MacroNode;
  CallNode           CallNode;
  TypeCastNode       TypeCastNode;
  LocalNode_union    LocalNode;
  RefNode            RefNode;
  NamedArgNode       NamedArgNode;
  SelectorNode       SelectorNode;
  IndexNode          IndexNode;
  SliceNode          SliceNode;
  IfNode             IfNode;
  TypeExprNode       TypeExprNode;
} Expr_union;
typedef union Type_union {
  Node               Node;
  TypeTypeNode       TypeTypeNode;
  IdTypeNode         IdTypeNode;
  AliasTypeNode      AliasTypeNode;
  RefTypeNode        RefTypeNode;
  BasicTypeNode      BasicTypeNode;
  ArrayTypeNode      ArrayTypeNode;
  TupleTypeNode      TupleTypeNode;
  StructTypeNode     StructTypeNode;
  FunTypeNode        FunTypeNode;
  MacroParamTypeNode MacroParamTypeNode;
} Type_union;
typedef union Node_union {
  BadNode    BadNode;
  FieldNode  FieldNode;
  Stmt_union Stmt;
  Expr_union Expr;
  Type_union Type;
} Node_union;

ASSUME_NONNULL_END
