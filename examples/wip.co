// this file is used for development and may not make sense or even compile

fun main(cs &[i8], ms mut&[i8]) auto
  // a = [1,2,3] ; r = &a // a promoted to mut, typeof(r) = mut&[int 3]
  // const r = &[1,2,3] // typeof(r) = &[int 3]
  // var r mut&[i8] ; r = &[1,2,3] // typeof(r) = mut&[i8]
  // var v [i8] ; r = &v
  // var v [i8 3] ; &v // ptr
  // var v [i8] ; const r &[i8] = &v // cslice
  //
  // var v [i8] ; &v // mslice* -> mslice
  // var v [i8] ; const r &[i8] = &v // mslice* -> cslice
  // var v [i8 3] ; const r &[i8] = &v // T* -> cslice
  // var v [i8 3] ; var r mut&[i8] = &v // T* -> mslice
  // var r &[i8] ; r = cs // cslice -> cslice
  var r mut&[i8] ; r = ms // mslice -> mslice
  // var r mut&[i8] ; r = cs // cslice -> mslice -- error


// fun fail1() &[i8]  // r is mut&[i8]
//   var v [i8] ; r = &v

/* C
typedef struct cslice { const void* p; uint len; } cslice;
void main(i64 x) {
  cslice v = {NULL,0};
  const i8 tmp[3] = {1,2,3};
  v = (cslice){tmp,3};
}
*/

// // unsafe fun to_rawptr<T>(_ &T) rawptr

// fun bytes() rawptr
//   hello = "Hello world\n"
//   var p = unsafe to_rawptr(hello)
//   p

// fun ints() rawptr
//   v = [1,2,3]
//   var p = unsafe to_rawptr(v)
//   p

// fun main(x int) rawptr
//   x



// // fun a(x &[u8]) rawptr
// //   var p = unsafe to_rawptr(x)
// //   p

// fun b(x &u32) rawptr
//   var p = unsafe to_rawptr(x)
//   p

// fun main() int
//   0

// fun write(fd i32, ptr rawptr, size uint) i32

// fun main() int
//   message = "Hello world\n"
//   ptr = unsafe to_rawptr(message)
//   write(1, ptr, 12)
//   0


// fun write(fd i32, ptr uint, size uint) i32

// fun foo(s &[u8]) int
//   1

// fun main(x, y int) int
//   hello = "hello world"
//   hello = "world"
//   write(1, size=5, ptr=hello)
//   y = foo(hello)
//   y = y * 2
//   x * y
