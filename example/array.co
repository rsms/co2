// fun bar(x &[int]) int

fun main(arg1 int) int
  // a [int 3]
  const K = [0,1,2]
  // const b [int 3] = [
  //   0,
  //   1
  //   2,]

  // c = [0, 1, 2]
  // c[1] = 3

  // d = [10, c[1], 10]
  // d[1] = 4

  // mut e [int 3] = [10,11,12]
  // e[1] = 22
  mut f [int 3] = [100,101,102]
  // f = K // error: array type [int 3] is not assignable
  g = K // error: array type [int 3] is not assignable
  // h = K // copy K to g
  // h[1] = 9

  // x int = 3
  // x = 4

  // const c = [i8(0),i32(0),2] // error: incompatible type i32 in array of type i8
  // r1 = &a // type: mut&[int] (since a is mutable)
  // r2 = &b // type: &[int] (since b is immutable)
  // // r3 [int] = &a // error: cannot use expression of type A; expected type B
  // // r3 &[i8] = &a // error: cannot use expression of type A; expected type B
  // r3 &[int] = &a
  // r4 &[int] = &b
  // r5 mut&[int] = &a
  // r6 mut&[int] = &b // error: b is not mutable  -- TODO --

  // s [int]

  // bad1 mut&[int] = a // error: cannot initialize reference with value of type [int]
  // bad2 [int] = &a // error: cannot initialize variable with reference

  // b[1]
  // c[1]
  // d[1]
  f[1]

  // x [3]int
  // x = [u16 3](0, 0, 0)
  // y = [u16 3](0, 0, 0)
  // x[1] + y[0]
  // x

  // t = (1, 2, 3)
  // y = 3
  // // y

// one = 1


// fun invert(color [3]int) nil {
//   red = color[0]
//   // color[0] = 255 - color[0]
//   // color[1] = 255 - color[1]
//   // color[2] = 255 - color[2]
// }

// fun main() {
//   // x = i8(4)
//   color = [3]int(255, 30, 0)
//   // invert(color)
//   // x
//   color
// }


// multi-dimensional array
// color2 [3][2]int = [[255, 255], [30, 255], [0, 255]]

// // array of size defined by constant expression
// array [acap]int // == (0,0,0,0)
// acap = acap1
// acap1 = 4 * acap2
// acap2 = 2 as int8

// array = [4]int()  // == (0,0,0,0)

// slice = []int(1, 2, 3)
