fun main(arg1 [int 3], arg2 int) int
  // a [int 3]
  // const K [int 3] = [10,20,30] // explicitly typed; type resolved by parse
  const K = [10,20,30] // ideally typed, resolved by type resolver
  // const b [int 3] = [0, 1, 2]

  // indexing arrays (parse: done, resolve: done, LLVM: done)
  v1 = K[0]
  // v2 = K[1:3][2] // error: index 2 out of bounds, accessing array of length 2
  // v3 = K[3]  // error: index 3 out of bounds, accessing array of length 3
  // v4 = K[-2] // error: index 4294967294 out of bounds, accessing array of length 3
  // s = K[2/2:6-3] // &[int 2]
  // v = s[3] // error: index 3 out of bounds, accessing array of length 2

  // // indexing tuples (parse: done, resolve: done, LLVM: TODO)
  // t = (1, 2, 3)
  // v5 = t[1]
  // // v6 = t[3] // error: no element 3 in tuple with 3 elements

  // slices/refs of arrays (parse: done, resolve: done, LLVM: WIP)
  h = &K           // &[int 3]
  // cts1 = K[:]      // &[int 3]
  // cts2 = K[0:]     // &[int 3]
  // // cts3 = K[2:1] // error: invalid slice index: 2 > 1
  // // cts4 = K[:4]  // error: index 4 out of bounds, slicing array of length 3
  // cts5 = K[:2]     // &[int 2]
  // cts6 = K[1:2]    // &[int 1]
  // cts7 = K[2:2]    // &[int] -- runtime sized rather than [int 0] or nil
  // rts1 = K[0:arg1] // &[int]
  // cts8 = rts1[:2]  // &[int 2] -- upgrade to sized array type

  // error: cannot reference a reference
  //var r1 &int
  //r2 = &r1     // error: cannot reference a reference (type &int)
  //r3 = &gref   // error: cannot reference a reference (type &int)
  //global var gref &int


  // // c = [0, 1, 2]
  // // c[1] = 3

  // // d = [10, c[1], 10]
  // // d[1] = 4

  // // mut e [int 3] = [10,11,12]
  // // e[1] = 22
  // //var f [int 3] = [100,101,102]
  // // f = K // error: array type [int 3] is not assignable
  // // g = K // error: array type [int 3] is not assignable
  // // h[1] = 9



  // K[1]
  // K[arg2]
  // h[1]
  h[arg2]
  // arg1[1]
  // arg1[arg2]
