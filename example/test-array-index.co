const K = [10,20,30]

fun index_constarray_ct1() int
  K[1] // constant int 20

fun index_constarray_ct2() int
  i = 1
  K[i] // constant int 20

fun index_constarray_rt1(arg1 int) int
  K[arg1] // gep load

fun index_constarray_rt2() int
  var i int
  i = 1 // make i mutable
  K[i] // gep load

fun index_constarrayref_ct() int
  r = &K // &[int 3]
  r[1] // constant int 20

fun index_constarrayref_ct(arg1 int) int
  r = &K // &[int 3]
  r[arg1] // gep load

fun index_mutarrayref_ct() int
  a = [10,20,30]
  r = &a // mut&[int 3]
  r[1] // gep load (not const since a is mut)

fun index_mutarrayref_rt(arg1 int) int
  a = [10,20,30]
  r = &a // mut&[int 3]
  r[arg1] // gep load

fun index_mutarrayref_explicit_deref_rt(arg1 int) int
  a = [10,20,30]
  r = &a // mut&[int 3]
  (*r)[arg1] // gep load

fun index_argarray_ct(arg1 [int 3]) int
  arg1[1] // extractvalue

fun index_argarray_rt(arg1 [int 3], arg2 int) int
  arg1[arg2] // gep load

fun index_argarray_ref_ct(arg1 &[int 3]) int
  arg1[1] // extractvalue

fun index_argarray_ref_rt(arg1 &[int 3], arg2 int) int
  arg1[arg2] // gep load

fun index_argarray_mutref_ct(arg1 mut&[int 3]) int
  arg1[1] // extractvalue

fun index_argarray_mutref_rt(arg1 mut&[int 3], arg2 int) int
  arg1[arg2] // gep load

fun index_tuple_ct() int
  t = (1, 2, 3)
  t[1] // constant int 2

fun index_tuple_rt() int
  t = (1, 2, 3)
  t = (11, 22, 33) // force t to become a mutable local
  t[1] // gep load
