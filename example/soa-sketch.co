

  for b in bullets
    b.position.x += b.velocity.x  // ILP pipe A
    b.position.y += b.velocity.y  // ILP pipe B

  struct Vec2 { x, y f32 }

  struct Bullet1 {
    position Vec2
    velocity Vec2
    name     str
  }
  bullets1 = [Bullet1(), Bullet1(), Bullet1()]
  // ↓ memory layout
  // 0    4    8    12   16   24   28   32   36   40   48   52   56   60   64
  // posx,posy,velx,vely,name,posx,posy,velx,vely,name,posx,posy,velx,vely,name
  // A1   B1   A1   B1        A2   B2   A2   B2        A3   B3   A3   B3
  // ↑ ILP pipe + iteration
  // 1. A: *0  + *8    B: *4  + *12
  // 2. A: *24 + *32   B: *28 + *36
  // 3. A: *48 + *56   B: *52 + *60

  struct Bullet2 {
    position [Vec2 3]
    velocity [Vec2 3]
    name     [str 3]
  }
  bullets2 = Bullet2()
  // ↓ memory layout
  // 0    4    8    12   16   20   24   28   32   36   40   44   48   56   64
  // posx,posy,posx,posy,posx,posy,velx,vely,velx,vely,velx,vely,name,name,name
  // A1   B1   A2   B2   A3   B3   A1   B1   A2   B2   A3   B3
  // ↑ ILP pipe + iteration
  // 1. A: *0  + *8    B: *4  + *12
  // 2. A: *16 + *24   B: *20 + *28
  // 3. A: *32 + *40   B: *36 + *44

  struct Bullet3 {
    x [struct { pos, vel f32 } 3]
    y [struct { pos, vel f32 } 3]
    name [str 3]
  }
  bullets3 = Bullet3()
  // ↓ memory layout
  // 0    4    8    12   16   20   24   28   32   36   40   44   48   56   64
  // posx,velx,posy,vely,posx,velx,posy,vely,posx,velx,posy,vely,name,name,name
  // A1   A1   B1   B1   A2   A2   B2   B2   A3   A3   B3   B3
  // ↑ ILP pipe + iteration
  // 1. A: *0  + *4    B: *8  + *12
  // 2. A: *16 + *20   B: *24 + *28
  // 3. A: *32 + *36   B: *40 + *44


